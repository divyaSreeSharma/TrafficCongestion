# Inspired by https://github.com/cloudfoundry-community/nginx-buildpack
worker_processes 1;
daemon off;

env VCAP_SERVICES;
env NGINX_ROOT_INCLUDE;

include <%= ENV["APP_ROOT"] %>/nginx/conf/root.conf;

# UAA items
env UAA_CLIENT_ID;
env UAA_CLIENT_CREDENTIALS;
env UAA_URI;

events { worker_connections 1024; }

error_log <%= ENV["APP_ROOT"] %>/openresty/nginx/logs/error.log debug;

http
{

  include <%= ENV["APP_ROOT"] %>/nginx/conf/http.conf;

  log_format cloudfoundry '$http_x_forwarded_for - $http_referer - [$time_local] "$request" $status $body_bytes_sent';
  access_log <%= ENV["APP_ROOT"] %>/openresty/nginx/logs/access.log cloudfoundry;

  # Define the MIME types for files.
  include       mime.types;
  sendfile on;

  include gzip.types;
  etag on;
  tcp_nopush on;
  keepalive_timeout 30;

  default_type  application/octet-stream;

  # when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
  # to disable content-type sniffing on some browsers.
  # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
  # currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
  # http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
  # 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
  add_header X-Content-Type-Options nosniff;
  add_header X-Frame-Options SAMEORIGIN;


  server {

    # Server variables
#?UAA    set $client_id <%= ENV["UAA_CLIENT_ID"] %>;
#?UAA    set $client_credentials <%= ENV["UAA_CLIENT_CREDENTIALS"] %>;
#?UAA    set $uaa_uri <%= ENV["UAA_URI"] %>;

    include <%= ENV["APP_ROOT"] %>/nginx/conf/server.conf;

    # added logging for debugging proxy issues:
    rewrite_log on;

    listen <%= ENV["PORT"] %>;
    server_name localhost;

    # Open File cache
    open_file_cache          max=2000 inactive=20s;
    open_file_cache_valid    60s;
    open_file_cache_min_uses 5;
    open_file_cache_errors   off;

    root <%= ENV["APP_ROOT"] %>;

    # nginx_status
    location /nginx_status {
      stub_status   on;
      access_log   off;
      allow 127.0.0.1;
      deny all;
    }

    # Don't allow any access to hidden files
    location ~ /\. { deny  all; }

    location ~* \.\w+$ {
      try_files $uri $uri/ 404;
      expires 1d;
    }

    location / {
      # For HTML5 Support, Serve index.html for any other endpoint
      index index.html index.htm Default.htm;
      try_files $uri $uri/ /index.html;

      <% if File.exists?(File.join(ENV["APP_ROOT"], "nginx/conf/.enable_directory_index")) %>
      autoindex on;
      <% end %>
    }

#?UAA    # Login routes
#?UAA    location /login {
#?UAA      access_by_lua '
#?UAA        local user = require("user")
#?UAA        return user.getAuthenticationCode()
#?UAA      ';
#?UAA    }

#?UAA    # Authentication callback
#?UAA    location /oauth-callback {
#?UAA      access_by_lua '
#?UAA        local user = require("user")
#?UAA        return user.performAccessTokenHandshake()
#?UAA      ';
#?UAA    }

#?UAA    ## User Routes
#?UAA    location /userinfo {
#?UAA        add_header Cache-Control "private";
#?UAA        expires off;

#?UAA        default_type 'application/json';
#?UAA        content_by_lua '
#?UAA            local user = require("user");
#?UAA            local user_info = user.getUserInfo();
#?UAA            if user_info ~= nil then
#?UAA              ngx.say(user_info)
#?UAA            else
#?UAA              ngx.exit(ngx.HTTP_UNAUTHORIZED)
#?UAA            end
#?UAA        ';
#?UAA    }

#?UAA    # Internal url to get user information
#?UAA    location /_internal/_userinfo {
#?UAA        proxy_set_header    Content-Type    application/x-www-form-urlencoded;
#?UAA        proxy_set_header    Authorization   "Basic <%= ENV["UAA_CLIENT_CREDENTIALS"] %>";
#?UAA        proxy_pass <%= ENV["UAA_URI"] %>/check_token;
#?UAA    }

#?UAA    location /logout {
#?UAA      access_by_lua '
#?UAA        local user = require("user")
#?UAA        return user.logout()
#?UAA      ';
#?UAA    }

#?UAA    # Internal location route in order to subrequest then
#?UAA    # authorization header
#?UAA    location /_internal/_access_token {
#?UAA      proxy_set_header    Content-Type    application/x-www-form-urlencoded;
#?UAA      proxy_set_header    Authorization   "Basic <%= ENV["UAA_CLIENT_CREDENTIALS"] %>";
#?UAA      proxy_pass <%= ENV["UAA_URI"] %>/oauth/token;
#?UAA    }
  }
}
